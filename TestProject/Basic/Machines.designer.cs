// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.StateMachine;
    
    
    public class RootGameFlow : Invert.StateMachine.StateMachine {
        
        private Invert.StateMachine.StateMachineTrigger _TestTrans;
        
        private MainMenuState _MainMenuState;
        
        private AnotherMenuState _AnotherMenuState;
        
        public RootGameFlow(ViewModel vm, string propertyName) : 
                base(vm, propertyName) {
        }
        
        public override Invert.StateMachine.State StartState {
            get {
                return this.MainMenuState;
            }
        }
        
        public virtual Invert.StateMachine.StateMachineTrigger TestTrans {
            get {
                if (this._TestTrans == null) {
                    this._TestTrans = new StateMachineTrigger(this , "TestTrans");
                }
                return _TestTrans;
            }
            set {
                _TestTrans = value;
            }
        }
        
        public virtual MainMenuState MainMenuState {
            get {
                if (this._MainMenuState == null) {
                    this._MainMenuState = new MainMenuState();
                }
                return _MainMenuState;
            }
            set {
                _MainMenuState = value;
            }
        }
        
        public virtual AnotherMenuState AnotherMenuState {
            get {
                if (this._AnotherMenuState == null) {
                    this._AnotherMenuState = new AnotherMenuState();
                }
                return _AnotherMenuState;
            }
            set {
                _AnotherMenuState = value;
            }
        }
        
        public override void Compose(System.Collections.Generic.List<Invert.StateMachine.State> states) {
            base.Compose(states);
            MainMenuState.TestTrans = new StateTransition("TestTrans", MainMenuState, AnotherMenuState);
            Transitions.Add(MainMenuState.TestTrans);
            MainMenuState.AddTrigger(TestTrans, MainMenuState.TestTrans);
            MainMenuState.StateMachine = this;
            states.Add(MainMenuState);
            AnotherMenuState.StateMachine = this;
            states.Add(AnotherMenuState);
        }
    }
    
    public class MainMenuState : Invert.StateMachine.State {
        
        private Invert.StateMachine.StateTransition _TestTrans;
        
        public Invert.StateMachine.StateTransition TestTrans {
            get {
                return _TestTrans;
            }
            set {
                _TestTrans = value;
            }
        }
        
        public override string Name {
            get {
                return "MainMenuState";
            }
        }
        
        public virtual void TestTransTransition() {
            this.Transition(this.TestTrans);
        }
    }
    
    public class AnotherMenuState : Invert.StateMachine.State {
        
        public override string Name {
            get {
                return "AnotherMenuState";
            }
        }
    }
}
