// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    
    
    public class GameViewModelBase : ViewModel {
        
        private System.IDisposable _FullNameDisposable;
        
        private RootGameFlow _GameFlowProperty;
        
        private P<String> _FullNameProperty;
        
        private P<String> _FirstNameProperty;
        
        private P<String> _LastNameProperty;
        
        private P<Vector3> _PositionProperty;
        
        private ModelCollection<BoxesViewModel> _Boxes;
        
        private ICommand _ChangeName;
        
        public GameViewModelBase(GameControllerBase controller, bool initialize = true) : 
                base(controller, initialize) {
        }
        
        public virtual RootGameFlow GameFlowProperty {
            get {
                return _GameFlowProperty;
            }
            set {
                _GameFlowProperty = value;
            }
        }
        
        public virtual Invert.StateMachine.State GameFlow {
            get {
                return GameFlowProperty.Value;
            }
            set {
                GameFlowProperty.Value = value;
            }
        }
        
        public virtual P<String> FullNameProperty {
            get {
                return _FullNameProperty;
            }
            set {
                _FullNameProperty = value;
            }
        }
        
        public virtual P<String> FirstNameProperty {
            get {
                return _FirstNameProperty;
            }
            set {
                _FirstNameProperty = value;
            }
        }
        
        public virtual P<String> LastNameProperty {
            get {
                return _LastNameProperty;
            }
            set {
                _LastNameProperty = value;
            }
        }
        
        public virtual P<Vector3> PositionProperty {
            get {
                return _PositionProperty;
            }
            set {
                _PositionProperty = value;
            }
        }
        
        public virtual String FullName {
            get {
                return FullNameProperty.Value;
            }
            set {
                FullNameProperty.Value = value;
            }
        }
        
        public virtual String FirstName {
            get {
                return FirstNameProperty.Value;
            }
            set {
                FirstNameProperty.Value = value;
            }
        }
        
        public virtual String LastName {
            get {
                return LastNameProperty.Value;
            }
            set {
                LastNameProperty.Value = value;
            }
        }
        
        public virtual Vector3 Position {
            get {
                return PositionProperty.Value;
            }
            set {
                PositionProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<BoxesViewModel> Boxes {
            get {
                return _Boxes;
            }
            set {
                _Boxes = value;
            }
        }
        
        public virtual ICommand ChangeName {
            get {
                return _ChangeName;
            }
            set {
                _ChangeName = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _FullNameProperty = new P<String>(this, "FullName");
            _FirstNameProperty = new P<String>(this, "FirstName");
            _LastNameProperty = new P<String>(this, "LastName");
            _PositionProperty = new P<Vector3>(this, "Position");
            _Boxes = new ModelCollection<BoxesViewModel>(this, "Boxes");
            _Boxes.CollectionChanged += BoxesCollectionChanged;
            _GameFlowProperty = new RootGameFlow(this, "GameFlow");
            ResetFullName();
        }
        
        protected override void WireCommands(Controller controller) {
            base.WireCommands(controller);
            var game = controller as GameController;
            this.ChangeName = new CommandWithSender<GameViewModel>(this as GameViewModel, game.ChangeName);
        }
        
        protected virtual void BoxesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            this.FirstName = stream.DeserializeString("FirstName");;
            this.LastName = stream.DeserializeString("LastName");;
            this._GameFlowProperty.SetState(stream.DeserializeString("GameFlow"));
            this.Position = stream.DeserializeVector3("Position");;
            if (stream.DeepSerialize) {
                this.Boxes.Clear();
                this.Boxes.AddRange(stream.DeserializeObjectArray<BoxesViewModel>("Boxes"));
            }
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeString("FirstName", this.FirstName);
            stream.SerializeString("LastName", this.LastName);
            stream.SerializeString("GameFlow", this.GameFlow.Name);;
            stream.SerializeVector3("Position", this.Position);
            if (stream.DeepSerialize) stream.SerializeArray("Boxes", this.Boxes);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("ChangeName", ChangeName) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // ComputedPropertyNode
            list.Add(new ViewModelPropertyInfo(_FullNameProperty, false, false, false, true));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_FirstNameProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_LastNameProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_GameFlowProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PositionProperty, false, false, false, false));
            list.Add(new ViewModelPropertyInfo(_Boxes, true, true, false, false));
        }
        
        public virtual System.Collections.Generic.IEnumerable<IObservableProperty> GetFullNameDependents() {
            yield return _FirstNameProperty;
            yield return _LastNameProperty;
            yield return _FirstNameProperty;
            yield return _PositionProperty;
            yield break;
        }
        
        public virtual void ResetFullName() {
            if (_FullNameDisposable != null) {
                _FullNameDisposable.Dispose();
            }
            _FullNameDisposable = _FullNameProperty.ToComputed(ComputeFullName, this.GetFullNameDependents().ToArray()).DisposeWith(this);
        }
        
        public virtual String ComputeFullName() {
            return default(String);
        }
    }
    
    public class BoxesViewModelBase : ViewModel {
        
        public BoxesViewModelBase(BoxesControllerBase controller, bool initialize = true) : 
                base(controller, initialize) {
        }
        
        public override void Bind() {
            base.Bind();
        }
        
        protected override void WireCommands(Controller controller) {
            base.WireCommands(controller);
            var boxes = controller as BoxesController;
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
            base.FillProperties(list);
        }
    }
}
