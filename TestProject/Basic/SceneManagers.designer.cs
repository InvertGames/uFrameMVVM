// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    
    
    public class TestBase : SceneManager {
        
        private TestElementViewModel _TestElement;
        
        private GameViewModel _Game;
        
        private GameController _GameController;
        
        private TestElementController _TestElementController;
        
        private BoxesController _BoxesController;
        
        public TestSettings _TestSettings = new TestSettings();
        [InjectAttribute("TestElement")]
        public virtual TestElementViewModel TestElement {
            get {
                if (this._TestElement == null) {
                    this._TestElement = CreateInstanceViewModel<TestElementViewModel>(TestElementController, "_TestElement");
                }
                return _TestElement;
            }
            set {
            }
        }
        
        [InjectAttribute("Game")]
        public virtual GameViewModel Game {
            get {
                if (this._Game == null) {
                    this._Game = CreateInstanceViewModel<GameViewModel>(GameController, "_Game");
                }
                return _Game;
            }
            set {
            }
        }
        
        [InjectAttribute()]
        public virtual GameController GameController {
            get {
                if (_GameController==null) {
                    _GameController = new GameController() { Container = Container };
                }
                return _GameController;
            }
            set {
                _GameController = value;
            }
        }
        
        [InjectAttribute()]
        public virtual TestElementController TestElementController {
            get {
                if (_TestElementController==null) {
                    _TestElementController = new TestElementController() { Container = Container };
                }
                return _TestElementController;
            }
            set {
                _TestElementController = value;
            }
        }
        
        [InjectAttribute()]
        public virtual BoxesController BoxesController {
            get {
                if (_BoxesController==null) {
                    _BoxesController = new BoxesController() { Container = Container };
                }
                return _BoxesController;
            }
            set {
                _BoxesController = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            Container.RegisterViewModel<TestElementViewModel>(TestElement, "TestElement");
            Container.RegisterViewModel<GameViewModel>(Game, "Game");
            Container.RegisterController<GameController>(GameController);
            Container.RegisterController<TestElementController>(TestElementController);
            Container.RegisterController<BoxesController>(BoxesController);
            Container.InjectAll();
            TestElementController.Initialize(TestElement);
            GameController.Initialize(Game);
        }
    }
    
    [System.SerializableAttribute()]
    public class TestSettingsBase : object {
        
        public string[] _Scenes;
    }
}
