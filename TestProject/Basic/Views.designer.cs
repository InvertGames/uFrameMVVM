// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using UnityEngine;
    
    
    public class GameViewBase : ViewBase {
        
        private System.IDisposable _PositionDisposable;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _FirstName;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _LastName;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Vector3 _Position;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Properties;
        
        [UFToggleGroup("FirstName")]
        [UnityEngine.HideInInspector()]
        public bool _BindFirstName = true;
        
        [UFGroup("FirstName")]
        [UnityEngine.SerializeField()]
        private bool _FirstNameonlyWhenChanged;
        
        [UFToggleGroup("Position")]
        [UnityEngine.HideInInspector()]
        public bool _BindPosition = true;
        
        [UFGroup("Position")]
        [UnityEngine.SerializeField()]
        private bool _PositiononlyWhenChanged;
        
        public override System.Type ViewModelType {
            get {
                return typeof(GameViewModel);
            }
        }
        
        public GameViewModel Game {
            get {
                return (GameViewModel)ViewModelObject;
            }
        }
        
        public virtual void ResetPosition() {
            if (_PositionDisposable != null) {
                _PositionDisposable.Dispose();
            }
            _PositionDisposable = GetPositionObservable().Subscribe(Game.PositionProperty).DisposeWith(this);
        }
        
        protected virtual Vector3 CalculatePosition() {
            return default(Vector3);
        }
        
        protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
            return this.UpdateAsObservable().Select(p=>CalculatePosition());
        }
        
        public override ViewModel CreateModel() {
            return this.RequestViewModel(GameManager.Container.Resolve<GameController>());
        }
        
        protected override void InitializeViewModel(ViewModel model) {
            var gameview = ((GameViewModel)model);
            gameview.FirstName = this._FirstName;
            gameview.LastName = this._LastName;
            gameview.Position = this._Position;
            gameview.Properties = this._Properties;
        }
        
        public override void Bind() {
            if (_BindFirstName) {
                this.BindProperty(this.Game.FirstNameProperty, this.FirstNameChanged, _FirstNameonlyWhenChanged);
            }
            if (_BindPosition) {
                this.BindProperty(this.Game.PositionProperty, this.PositionChanged, _PositiononlyWhenChanged);
            }
            ResetPosition();
        }
        
        public virtual void FirstNameChanged(String arg1) {
        }
        
        public virtual void PositionChanged(Vector3 arg1) {
        }
        
        public virtual void ExecuteChangeName() {
            this.ExecuteCommand(Game.ChangeName);
        }
    }
}
