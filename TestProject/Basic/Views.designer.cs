// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using Invert.MVVMTest;
    
    
    public class HeadTrainerViewBase : ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public ViewBase _CurrentScreen;
        
        [UFToggleGroup("LoginFlow")]
        [UnityEngine.HideInInspector()]
        public bool _BindLoginFlow = true;
        
        [UFGroup("LoginFlow")]
        [UnityEngine.SerializeField()]
        private bool _LoginFlowonlyWhenChanged;
        
        public override System.Type ViewModelType {
            get {
                return typeof(HeadTrainerViewModel);
            }
        }
        
        public HeadTrainerViewModel HeadTrainer {
            get {
                return (HeadTrainerViewModel)ViewModelObject;
            }
        }
        
        public override ViewModel CreateModel() {
            return this.RequestViewModel(GameManager.Container.Resolve<HeadTrainerController>());
        }
        
        protected override void InitializeViewModel(ViewModel model) {
            var headtrainerview = ((HeadTrainerViewModel)model);
            headtrainerview.CurrentScreen = this._CurrentScreen == null ? null : this._CurrentScreen.ViewModelObject as ScreenViewModel;
        }
        
        public override void Bind() {
            if (_BindLoginFlow) {
                this.BindProperty(this.HeadTrainer.LoginFlowProperty, this.LoginFlowChanged, _LoginFlowonlyWhenChanged);
            }
        }
        
        public virtual void LoginFlowChanged(Invert.StateMachine.State State) {
        }
        
        public virtual void ExecuteMiniCamp() {
            this.ExecuteCommand(HeadTrainer.MiniCamp);
        }
        
        public virtual void ExecuteDailyWorkout() {
            this.ExecuteCommand(HeadTrainer.DailyWorkout);
        }
        
        public virtual void ExecuteBeginLogin() {
            this.ExecuteCommand(HeadTrainer.BeginLogin);
        }
        
        public virtual void ExecuteLoginCompleted() {
            this.ExecuteCommand(HeadTrainer.LoginCompleted);
        }
    }
}
