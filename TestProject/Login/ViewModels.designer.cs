// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.MVVMTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public class LoginScreenViewModelBase : ScreenViewModel {
        
        private System.IDisposable _ErrorMessageDisposable;
        
        private P<String> _ErrorMessageProperty;
        
        private P<String> _UsernameProperty;
        
        private P<String> _PasswordProperty;
        
        private ICommand _Login;
        
        public LoginScreenViewModelBase(LoginScreenControllerBase controller, bool initialize = true) : 
                base(controller, initialize) {
        }
        
        public virtual P<String> ErrorMessageProperty {
            get {
                return _ErrorMessageProperty;
            }
            set {
                _ErrorMessageProperty = value;
            }
        }
        
        public virtual P<String> UsernameProperty {
            get {
                return _UsernameProperty;
            }
            set {
                _UsernameProperty = value;
            }
        }
        
        public virtual P<String> PasswordProperty {
            get {
                return _PasswordProperty;
            }
            set {
                _PasswordProperty = value;
            }
        }
        
        public virtual String ErrorMessage {
            get {
                return ErrorMessageProperty.Value;
            }
            set {
                ErrorMessageProperty.Value = value;
            }
        }
        
        public virtual String Username {
            get {
                return UsernameProperty.Value;
            }
            set {
                UsernameProperty.Value = value;
            }
        }
        
        public virtual String Password {
            get {
                return PasswordProperty.Value;
            }
            set {
                PasswordProperty.Value = value;
            }
        }
        
        public virtual ICommand Login {
            get {
                return _Login;
            }
            set {
                _Login = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _ErrorMessageProperty = new P<String>(this, "ErrorMessage");
            _UsernameProperty = new P<String>(this, "Username");
            _PasswordProperty = new P<String>(this, "Password");
            ResetErrorMessage();
        }
        
        protected override void WireCommands(Controller controller) {
            base.WireCommands(controller);
            var loginscreen = controller as LoginScreenController;
            this.Login = new CommandWithSender<LoginScreenViewModel>(this as LoginScreenViewModel, loginscreen.Login);
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("Login", Login) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // ComputedPropertyNode
            list.Add(new ViewModelPropertyInfo(_ErrorMessageProperty, false, false, false, true));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_UsernameProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PasswordProperty, false, false, false, false));
        }
        
        public virtual System.Collections.Generic.IEnumerable<IObservableProperty> GetErrorMessageDependents() {
            yield return _UsernameProperty;
            yield return _PasswordProperty;
            yield break;
        }
        
        public virtual void ResetErrorMessage() {
            if (_ErrorMessageDisposable != null) {
                _ErrorMessageDisposable.Dispose();
            }
            _ErrorMessageDisposable = _ErrorMessageProperty.ToComputed(ComputeErrorMessage, this.GetErrorMessageDependents().ToArray()).DisposeWith(this);
        }
        
        public virtual String ComputeErrorMessage() {
            return default(String);
        }
    }
}
