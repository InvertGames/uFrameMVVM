// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.MVVM {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameMVVMBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementNode> _Element;
        
        private Invert.Core.GraphDesigner.NodeConfig<SimpleClassNode> _SimpleClass;
        
        private Invert.Core.GraphDesigner.NodeConfig<ViewNode> _View;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComputedPropertyNode> _ComputedProperty;
        
        private Invert.Core.GraphDesigner.NodeConfig<SubsystemNode> _Subsystem;
        
        private Invert.Core.GraphDesigner.NodeConfig<SceneManagerNode> _SceneManager;
        
        private Invert.Core.GraphDesigner.NodeConfig<MVVMNode> _MVVM;
        
        private Invert.Core.GraphDesigner.NodeConfig<StateMachineNode> _StateMachine;
        
        private Invert.Core.GraphDesigner.NodeConfig<StateNode> _State;
        
        private Invert.Core.GraphDesigner.NodeConfig<ViewComponentNode> _ViewComponent;
        
        private Invert.Core.GraphDesigner.NodeConfig<CommandNode> _Command;
        
        private Invert.Core.GraphDesigner.NodeConfig<ServiceNode> _Service;
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementNode> Element {
            get {
                return _Element;
            }
            set {
                _Element = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SimpleClassNode> SimpleClass {
            get {
                return _SimpleClass;
            }
            set {
                _SimpleClass = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ViewNode> View {
            get {
                return _View;
            }
            set {
                _View = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComputedPropertyNode> ComputedProperty {
            get {
                return _ComputedProperty;
            }
            set {
                _ComputedProperty = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SubsystemNode> Subsystem {
            get {
                return _Subsystem;
            }
            set {
                _Subsystem = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SceneManagerNode> SceneManager {
            get {
                return _SceneManager;
            }
            set {
                _SceneManager = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<MVVMNode> MVVM {
            get {
                return _MVVM;
            }
            set {
                _MVVM = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StateMachineNode> StateMachine {
            get {
                return _StateMachine;
            }
            set {
                _StateMachine = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StateNode> State {
            get {
                return _State;
            }
            set {
                _State = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ViewComponentNode> ViewComponent {
            get {
                return _ViewComponent;
            }
            set {
                _ViewComponent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<CommandNode> Command {
            get {
                return _Command;
            }
            set {
                _Command = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ServiceNode> Service {
            get {
                return _Service;
            }
            set {
                _Service = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCommandsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertiesSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.Core.uFrameContainer container) {
            container.RegisterInstance<IEditorCommand>(GetCommandsSelectionCommand(), typeof(CommandsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CommandsChildItem>();
            container.AddItem<HandlersReference>();
            container.RegisterInstance<IEditorCommand>(GetPropertiesSelectionCommand(), typeof(PropertiesChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertiesChildItem>();
            container.RegisterInstance<IEditorCommand>(GetCollectionsSelectionCommand(), typeof(CollectionsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<BindingsReference>();
            container.AddItem<SubPropertiesReference>();
            container.AddTypeItem<InstancesReference>();
            container.AddItem<SceneTransitionsReference>();
            container.AddItem<TransitionsChildItem>();
            container.AddItem<StateTransitionsReference>();
            Element = container.AddNode<ElementNode,ElementNodeViewModel,ElementNodeDrawer>("Element");
            Element.Inheritable();
            Element.Color(NodeColor.DarkGray);
            Element.HasSubNode<ViewNode>();
            Element.HasSubNode<ComputedPropertyNode>();
            Element.HasSubNode<StateMachineNode>();
            Element.HasSubNode<ViewComponentNode>();
            Element.HasSubNode<CommandNode>();
            SimpleClass = container.AddNode<SimpleClassNode,SimpleClassNodeViewModel,SimpleClassNodeDrawer>("SimpleClass");
            SimpleClass.Inheritable();
            SimpleClass.Color(NodeColor.DarkDarkGray);
            View = container.AddNode<ViewNode,ViewNodeViewModel,ViewNodeDrawer>("View");
            View.Inheritable();
            View.Color(NodeColor.Blue);
            ComputedProperty = container.AddNode<ComputedPropertyNode,ComputedPropertyNodeViewModel,ComputedPropertyNodeDrawer>("ComputedProperty");
            ComputedProperty.Color(NodeColor.Green);
            Subsystem = container.AddGraph<SubsystemGraph, SubsystemNode>("SubsystemGraph");
            Subsystem.Color(NodeColor.Purple);
            Subsystem.HasSubNode<ElementNode>();
            Subsystem.HasSubNode<SimpleClassNode>();
            Subsystem.HasSubNode<CommandNode>();
            Subsystem.HasSubNode<ServiceNode>();
            SceneManager = container.AddNode<SceneManagerNode,SceneManagerNodeViewModel,SceneManagerNodeDrawer>("SceneManager");
            SceneManager.Color(NodeColor.Orange);
            MVVM = container.AddGraph<MVVMGraph, MVVMNode>("MVVMGraph");
            MVVM.Color(NodeColor.Gray);
            MVVM.HasSubNode<SubsystemNode>();
            MVVM.HasSubNode<SceneManagerNode>();
            StateMachine = container.AddGraph<StateMachineGraph, StateMachineNode>("StateMachineGraph");
            StateMachine.Color(NodeColor.Orange);
            StateMachine.HasSubNode<StateNode>();
            State = container.AddNode<StateNode,StateNodeViewModel,StateNodeDrawer>("State");
            State.Color(NodeColor.Green);
            ViewComponent = container.AddNode<ViewComponentNode,ViewComponentNodeViewModel,ViewComponentNodeDrawer>("ViewComponent");
            ViewComponent.Color(NodeColor.Orange);
            Command = container.AddNode<CommandNode,CommandNodeViewModel,CommandNodeDrawer>("Command");
            Command.Inheritable();
            Command.Color(NodeColor.Black);
            Service = container.AddNode<ServiceNode,ServiceNodeViewModel,ServiceNodeDrawer>("Service");
            Service.Color(NodeColor.Gray);
            container.Connectable<ElementNode,ViewNode>();
            container.Connectable<ElementNode,InstancesReference>();
            container.Connectable<PropertiesChildItem,BindingsReference>();
            container.Connectable<PropertiesChildItem,SceneProperties>();
            container.Connectable<PropertiesChildItem,ComputedPropertyNode>();
            container.Connectable<PropertiesChildItem,SubPropertiesReference>();
            container.Connectable<PropertiesChildItem,StateMachineNode>();
            container.Connectable<CollectionsChildItem,BindingsReference>();
            container.Connectable<CommandsChildItem,BindingsReference>();
            container.Connectable<CommandsChildItem,TransitionsChildItem>();
            container.Connectable<CommandsChildItem,SceneTransitionsReference>();
            container.Connectable<CommandsChildItem,HandlersReference>();
            container.Connectable<PropertiesChildItem,BindingsReference>();
            container.Connectable<CollectionsChildItem,BindingsReference>();
            container.Connectable<ViewNode,ViewComponentNode>();
            container.Connectable<ComputedPropertyNode,TransitionsChildItem>();
            container.Connectable<Export,Subsystem>();
            container.Connectable<Export,Import>();
            container.Connectable<SceneTransitionsReference,SceneManagerNode>();
            container.Connectable<TransitionsChildItem,StateTransitionsReference>();
            container.Connectable<StartState,StateNode>();
            container.Connectable<StateTransitionsReference,StateNode>();
        }
    }
}
